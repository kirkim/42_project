#include "cub3d.h"

void    set_ray(t_god *god, double angle)
{
    double xintercept, yintercept;
    double xstep, ystep;

    ///////////////////////////////////////////
    // HORIZONGAL RAY-GRID INTERSECTION CODE //
    //////////////////////////////////////////
    int foundHorzWallHit = FALSE;
    double horzWallHitX = 0;
    double horzWallHitY = 0;

    ray_init(&god->ray, angle);
    // Find the y-coordinate of the closest horizontal grid intersection
    yintercept = floor(god->player.y  / TILE_SIZE) * TILE_SIZE;
    yintercept += god->ray.isRay_facingDown ? TILE_SIZE : 0;
    // Find the x-coordinate of the closest horizontal grid intersenction
    xintercept = god->player.x + (yintercept - god->player.y) / tan(god->ray.ray_angle);

    // Calculate the increment xstep and ystep
    ystep = TILE_SIZE;
    ystep *= god->ray.isRay_facingUp ? -1 : 1;

    xstep = TILE_SIZE / tan(god->ray.ray_angle);
    xstep *= (god->ray.isRay_facingLeft && xstep > 0) ? -1 : 1;
    xstep *= (god->ray.isRay_facingRight && xstep < 0) ? -1 : 1;

    double nextHorzTouchX = xintercept;
    double nextHorzTouchY = yintercept;

    // Increment xstep and ystep until we find a wall
    while (nextHorzTouchX >= 0 && nextHorzTouchX <= WINDOW_WIDTH && nextHorzTouchY >= 0 && nextHorzTouchY <= WINDOW_HEIGHT) {
        if (is_wall(nextHorzTouchX, nextHorzTouchY - (god->ray.isRay_facingUp ? 1 : 0))) {
            // WE FOUND A WALL HIT...
            foundHorzWallHit = TRUE;
            horzWallHitX = nextHorzTouchX;
            horzWallHitY = nextHorzTouchY;
            //stroke("red");
            //line(player.x, player.y, wallHitX, wallHitY);
            break;
        } else {
            nextHorzTouchX += xstep;
            nextHorzTouchY += ystep;
        }
    }
    ///////////////////////////////////////////
    // VERTICAL RAY-GRID INTERSECTION CODE //
    //////////////////////////////////////////
    int foundVertWallHit = FALSE;
    double vertWallHitX = 0;
    double vertWallHitY = 0;

    // Find the x-coordinate of the closest vertical grid intersection
    xintercept = floor(god->player.x  / TILE_SIZE) * TILE_SIZE;
    xintercept += god->ray.isRay_facingRight ? TILE_SIZE : 0;
        
    // Find the y-coordinate of the closest vertical grid intersenction
    yintercept = god->player.y + (xintercept - god->player.x) * tan(god->ray.ray_angle); // horizon -> vertical로 복붙할때 바뀌는 가장중요한 코드

    // Calculate the increment xstep and ystep
    xstep = TILE_SIZE;
    xstep *= god->ray.isRay_facingLeft ? -1 : 1;

    ystep = TILE_SIZE * tan(god->ray.ray_angle);
    ystep *= (god->ray.isRay_facingUp && ystep > 0) ? -1 : 1;
    ystep *= (god->ray.isRay_facingDown && ystep < 0) ? -1 : 1;

    double nextVertTouchX = xintercept;
    double nextVertTouchY = yintercept;

    // Increment xstep and ystep until we find a wall
    while (nextVertTouchX >= 0 && nextVertTouchX <= WINDOW_WIDTH && nextVertTouchY >= 0 && nextVertTouchY <= WINDOW_HEIGHT) {
        if (is_wall(nextVertTouchX - (god->ray.isRay_facingLeft ? 1 : 0), nextVertTouchY)) {
            // WE FOUND A WALL HIT...
            foundVertWallHit = TRUE;
            vertWallHitX = nextVertTouchX;
            vertWallHitY = nextVertTouchY;

            break;
        } else {
            nextVertTouchX += xstep;
            nextVertTouchY += ystep;
        }
    }

    // Calculate both horizontal and vertical distances and choose the smallest value
    double horzHitDistance = (foundHorzWallHit)
        ? distance_between_points(god->player.x, god->player.y, horzWallHitX, horzWallHitY)
        : DBL_MAX;
    double vertHitDistance = (foundVertWallHit)
        ? distance_between_points(god->player.x, god->player.y, vertWallHitX, vertWallHitY)
        : DBL_MAX;

    // only store the smallest of the distances
    if (vertHitDistance < horzHitDistance) {
        god->ray.wall_hitX = vertWallHitX;
        god->ray.wall_hitY = vertWallHitY;
        god->ray.distance = vertHitDistance;
        god->ray.wasHit_vertical = TRUE;
    } else {
        god->ray.wall_hitX = horzWallHitX;
        god->ray.wall_hitY = horzWallHitY;
        god->ray.distance = horzHitDistance;
        god->ray.wasHit_vertical = FALSE;
    }
    draw_line(god, god->player.x, god->player.y, god->ray.wall_hitX, god->ray.wall_hitY);
}